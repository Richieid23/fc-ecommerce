version: "3.8"

services:
#  app:
#    build: .
#    ports:
#      - "8080:8080"
#    environment:
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/db_fc_ecommerce
#      - SPRING_DATASOURCE_USERNAME=ecommerce_user
#      - SPRING_DATASOURCE_PASSWORD=@pguser123
#    depends_on:
#      - db
#      - redis
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "200k"
#        max-file: "10"

  db:
    image: postgres:13
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=db_fc_ecommerce
      - POSTGRES_USER=ecommerce_user
      - POSTGRES_PASSWORD=@pguser123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-sonarqube-db.sh:/docker-entrypoint-initdb.d/init-sonarqube-db.sh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ecommerce_user -d db_fc_ecommerce" ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: always

  sonarqube:
    image: sonarqube:community
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extension
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      - db

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1

  zookeeper-fc:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper-fc
    container_name: zookeeper-fc
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper-fc:2888:3888


  kafka-fc:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka-fc
    container_name: kafka-fc
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-fc:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-fc:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper-fc

  kafka-ui-fc:
    container_name: kafka-ui-fc
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8082:8080"
    depends_on:
      - kafka-fc
    restart: "no"
    environment:
      KAFKA_CLUSTERS_0_NAME: new-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-fc:29092
      KAFKA_CLUSTER_0_ZOOKEEPER: zookeeper-fc:2181
      KAFKA_CLUSTER_0_READONLY: 'false'

volumes:
  postgres_data:
  redis_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  elasticsearch_data: